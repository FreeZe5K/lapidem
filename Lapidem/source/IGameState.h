//////////////////////////////////////////////////////////////////////////
//  File Name   :   "IGameState.h"
//
//  Author Name :   Mike Hatter
//
//  Purpose     :   Provides an interface for game-play states.
//////////////////////////////////////////////////////////////////////////
#pragma once                              // Necessary Include protection.

class IGameState
{
public:
	//////////////////////////////////////////////////////////////////////////
	//  Function  :   "Constructor"
	//
	//  Purpose   :   Creates a IGameState object. 
	//////////////////////////////////////////////////////////////////////////
	IGameState( )                  { /* DO NOTHING */ }

	//////////////////////////////////////////////////////////////////////////
	//  Function  :   "Destructor"
	//
	//  Purpose   :   This method is automatically invoked 
	//                when the object is destroyed.
	//////////////////////////////////////////////////////////////////////////
	virtual ~IGameState( )     = 0 { /* DO NOTHING */ }

	//////////////////////////////////////////////////////////////////////////
	//  Function  :   "Enter"
	//
	//  Purpose   :   This method is called when a state gets initialized.
	//////////////////////////////////////////////////////////////////////////
	virtual void Enter( )      = 0;

	//////////////////////////////////////////////////////////////////////////
	//  Function  :   "Input"
	//
	//  Purpose   :   This method is called to handle input.
	//////////////////////////////////////////////////////////////////////////
	virtual bool Input( )      = 0;

	//////////////////////////////////////////////////////////////////////////
	//  Function  :   "Update"
	//
	//  Purpose   :   This method is used to update the current state.
	//////////////////////////////////////////////////////////////////////////
	virtual void Update( )     = 0;

	//////////////////////////////////////////////////////////////////////////
	//  Function  :   "Render"
	//
	//  Purpose   :   This method is called to draw all objects to the screen.
	//////////////////////////////////////////////////////////////////////////
	virtual void Render( )     = 0;

	//////////////////////////////////////////////////////////////////////////
	//  Function  :   "Exit"
	//
	//  Purpose   :   This method is called when a state exits.
	//////////////////////////////////////////////////////////////////////////
	virtual void Exit( )       = 0;
};